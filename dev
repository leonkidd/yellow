*功能
1.可以自定义解析器来解析不同类型的文件, 不同拦截器来处理数据, 过滤器来过滤全局数据。
2.遍历指定目录下（包含子目录）的所有文件，Excel的话包任Sheet、 Row、 Cell。
3.组合数据, 根据组合器组合成统一格式
4.一些在此框架基础上开发好的工具,如根据填写在模版文件上的单元格名称去数据Excel中批量取数的工具。

*Feature
1.分为Filler, Intercepter, Parser模块
2.对Excel2003, 2007都支持


!!! use CellReference instead Chessboard, and use it rebuild TDCellIntercepter, 提取NTDYellow与TDYellow中begin,end等相同部份
!!! 当前yellow的程序接口是只处理单一文件的，如何对批量处理文件，如一整个目录提供辅助
!!! 用CellReference代替Chessboard,它支持的列数更多, 不造轮子.
!!! Info, Filler等在Yellow实现（TDYellow和NTDYellow）中问题，(<?>)	// FileInfo 变成T, 即File和IO流如何与各组件匹配, 应以IO主核心, File为辅
!! 整理注释，整理构架思路
!!!! 如何处理单例情况下Filler中数据积累问题（如RuleBreak的多个文件用同一个Intercepter处理）
!!!! 注意Filler的单例特性, 每次yellow()调用时完成取数、处理、填充等一系列动作, 如果循环对多个输入源调用yellow, 那么Intercepter
的over方法所返回的数据会!每次!都会被Fill到目标对象中, 所以当输出源单个且输入源多个时，注意在Intercepter#info中清理存储变量，保持每次over
只返回当前输入源的数据。

!!! Filler与Interceper解耦：当前,由TD拦截器的over返回Filler所需要的数据已都被限定为
	List<Object[]>(即二维表的Filler方式), TD打头的拦截器这个头的意义是对应Parser,而
	不是Filler，应该解耦、可适配. 所以TDYellow等Yellow的实现应该是2而不是1
	1.public TDYellow(TDParser parser, TDIntercepter<?> intercepter, TDFiller filler)
	2.public TDYellow(TDParser parser, TDIntercepter<?> intercepter, Filler filler) {

!!!方案
	1.使用统一设计标准，TD*（TDParser,TDIntercepter,TDYellow）, Excel*（ExeclParser,ExcelIntercepter,ExcelYellow）等相互独立,而又都实现了Parser, Yellow, Intercepter
	2.Info应由Yellow带入，并直接交给Intercepter，与Parser无关
	3.Sheet0Parser是基于Excel第一个Sheet对TDParser的实现
	4.ExcelParserImpl是对ExeclParser的实现。
	5.!Intercepter单例，注意其中一些变量是否会被重复使用，特别是NTDIntercepter中不同的page间共用。
	

1-based
NTDIntercepter#sheet方法上要做一些数据归零的操作（因为Intercepter单例）

大文件分段同时读的功能
读，解，读，三个操作动态均衡

提示yellow.yml中的类不存在（现在报的错是castException）等，

多个Sheet问题迭代问题

//5.DataSource	数据源,Map（内存中）、数据库等

核心调用关系
Manager 操作 组件

*TODO
大文件以Excel顺序读取实现（普通的可以回读）

Excel版本的TDCellIntercepter
 * <p>
 * 单元格标识为：<code>[SheetName!]CellName</code>, 其中<code>SheetName</code>
 * 代表Excel的SheetName(当非Excel或默认第一个Sheet时可不用写), <code>CellName</code>代表单元格位置(e.g.
 * H3).
 * </p>


*Record
Yellow到底是为TD量身打造呢，还是仅仅是个分析、处理、结果的一个标准框架，而TD只是其下的一个标准?
前者好处：Yellow类只需要一个，目的明确，Parser没有泛型，Parser等组件不用延申出TD*
后者好处：为其他应用环境打基础，如Word, Text, 甚至IO流级别的处理分析。
考虑再三：还是使用后者, 延审出TD为一个子标准。

TDParser, TDYellow, TDIntercepter同一组，相互关联。基于它的实现可共用TDYellow,装配不同的TDParser和TDIntercepter

